CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE friends (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sender INT NOT NULL,
    receiver INT NOT NULL,
    status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (receiver) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE sessions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    session_id VARCHAR(255) NOT NULL,
    last_logon TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE blogs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    text TEXT NOT NULL,
    author INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (author) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE blog_comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    blog_id INT NOT NULL,
    parent_id INT DEFAULT NULL,  -- Si es una respuesta a otro comentario
    author INT NOT NULL,
    text TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (blog_id) REFERENCES blogs(id) ON DELETE CASCADE,
    FOREIGN KEY (author) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (parent_id) REFERENCES blog_comments(id) ON DELETE CASCADE
);
CREATE TABLE groups (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    author INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (author) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE group_comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id INT NOT NULL,
    author INT NOT NULL,
    text TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES groups(id) ON DELETE CASCADE,
    FOREIGN KEY (author) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE layouts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    code TEXT NOT NULL,
    author INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (author) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE conversations (
    id INT AUTO_INCREMENT PRIMARY KEY,         -- Identificador único de la conversación
    user1 INT NOT NULL,                        -- ID del primer usuario involucrado en la conversación
    user2 INT NOT NULL,                        -- ID del segundo usuario involucrado en la conversación
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Fecha en que se crea la conversación
    FOREIGN KEY (user1) REFERENCES users(id) ON DELETE CASCADE, -- Relación con la tabla de usuarios
    FOREIGN KEY (user2) REFERENCES users(id) ON DELETE CASCADE, -- Relación con la tabla de usuarios
    CONSTRAINT unique_conversation UNIQUE (user1, user2) -- Garantiza que solo haya una conversación entre dos usuarios
);
CREATE TABLE messages (
    id INT AUTO_INCREMENT PRIMARY KEY,          -- Identificador único del mensaje
    conversation_id INT NOT NULL,               -- ID de la conversación a la que pertenece el mensaje
    sender_id INT NOT NULL,                     -- ID del usuario que envía el mensaje
    message_text TEXT NOT NULL,                 -- Contenido del mensaje
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Fecha y hora de envío
    FOREIGN KEY (conversation_id) REFERENCES conversations(id) ON DELETE CASCADE, -- Relación con la tabla de conversaciones
    FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE -- Relación con la tabla de usuarios
);

